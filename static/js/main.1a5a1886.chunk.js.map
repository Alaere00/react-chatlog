{"version":3,"sources":["components/ChatEntry.js","components/ChatLog.js","App.js","registerServiceWorker.js","index.js"],"names":["ChatEntry","props","sender","year","Date","timeStamp","getFullYear","useState","liked","likedPost","setLikedMessage","buttonClass","postPos","className","body","onClick","id","onToggleHeart","ChatLog","entries","map","entry","App","messages","likedMessage","setLiked","totalLikes","reduce","total","message","cntTotalLikes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1a5a1886.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './ChatEntry.css';\nimport PropTypes from 'prop-types';\n\n\nconst ChatEntry = (props) => {\n  const {sender} = props\n  const date1 = new Date(props.timeStamp) \n  const year = 2022 - date1.getFullYear()\n\n  const [likedPost, setLikedMessage] = useState(props.liked)\n\n  const toggle = id => {\n    props.onToggleHeart(id);\n    setLikedMessage(!likedPost);\n  }\n\n\n  const buttonClass = likedPost ? '‚ù§Ô∏è' : 'ü§ç';\n\n  const postPos = sender === 'Vladimir' ? 'local' : 'remote';\n\n  return (\n    <div className={`chat-entry ${postPos}`}>\n      <h2 className=\"entry-name\">{props.sender}</h2>\n      <section className={`entry-bubble ${postPos}`}> \n        <p>\n          {props.body}\n        </p>\n        <p className=\"entry-time\">{`${year} years ago`}\n        </p>\n        <button \n        className=\"like\"\n        onClick={()=> toggle(props.id)}\n        >{buttonClass}</button>\n      </section>\n    </div>\n  );\n};\n\nChatEntry.propTypes = {\n  id: PropTypes.number,\n  sender: PropTypes.string,\n  body: PropTypes.string,\n  timeStamp: PropTypes.string,\n  liked: PropTypes.bool,\n  onToggleHeart: PropTypes.func,\n};\n\nexport default ChatEntry;\n","import React from 'react';\nimport ChatEntry from './ChatEntry';\nimport PropTypes from 'prop-types';\n\nconst ChatLog = (props) => {\n  const getEntryDataJSX = (entries) => {\n    return entries.map((entry) => {\n      return (\n      <ChatEntry\n      key={entry.id}\n      id={entry.id}\n      sender={entry.sender} \n      body={entry.body} \n      timeStamp={entry.timeStamp}\n      liked={entry.liked}\n      onToggleHeart={props.onToggleHeart}\n      />\n    );\n  });\n}\n  \n  return <ul className='chat-entry'>{getEntryDataJSX(props.entries)}</ul>\n};\n\n  \nChatLog.propTypes = {\n  entries: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    sender: PropTypes.string,\n    body: PropTypes.string,\n    timeStamp: PropTypes.string,\n    liked: PropTypes.bool,\n})),\n  onToggleHeart: PropTypes.func,\n\n}\n\nexport default ChatLog; ","import React, { useState } from 'react';\nimport './App.css';\nimport ChatLog from './components/ChatLog';\nimport messages from './data/messages.json';\n\nconst App = () => {\n  const [likedMessage, setLiked] = useState(messages);\n\n  const cntTotalLikes = (likedMessage) => {\n    return likedMessage.reduce((total, message) => {\n      if (message.liked) {\n        total += 1;\n      }\n      return total;\n    }, 0);\n  };\n\n  const toggleHeart = (id) => {\n    const liked = likedMessage.map((message) => {\n      if (id === message.id) {\n        return { ...message, liked: !message.liked };\n      } else {\n        return message;\n      }\n    });\n    setLiked(liked);\n  };\n\n  const totalLikes = cntTotalLikes(likedMessage);\n\n  return (\n    <div id=\"App\">\n      <header>\n        <h1>Application Title</h1>\n        <h2>\n          {totalLikes} {`‚ù§Ô∏ès`}\n        </h2>\n      </header>\n      <main>\n        <ChatLog entries={messages} onToggleHeart={toggleHeart} />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}